var util = require('util');
var fs = require('fs');

module.exports = function (options = {}) {
	return function () {
		var exclude = ['__tests__'];

		var compiler = this;
		var entryPath = options.entryPath || this.context;

		entryPath = Array.isArray(entryPath) ? entryPath : [ entryPath ];

		compiler.plugin('environment', function () {
			var autoGenerated = [];

			compiler.inputFileSystem.stat = function (path, callback) {
				const isExcluded = exclude.some(x => path.indexOf(x) !== -1);
				const inEntryPath = entryPath.some(entryPath => path.indexOf(entryPath) !== -1);

				if (inEntryPath && path.match(/index\.js$/) && !isExcluded) {

					this.__proto__.stat.call(this, path, (err, stats) => {
						if (err) {
							const err1 = err;
							const stats1 = stats;

							// check if typescript file doesn't exists
							this.__proto__.stat.call(this, path.replace(/\.js$/, '.ts'), (err, stats) => {
								if (err) {
									autoGenerated.push(path);

									stats = new fs.Stats();
									stats.mode = 33206;
		
									callback(null, stats);
								} else {
									callback(err1, stats1);
								}
							});
						}
						else {
							callback(err, stats);
						}
					});
				} else {
					this.__proto__.stat.apply(this, arguments);
				}
			};

			compiler.inputFileSystem.readFile = function (path, callback) {
				if (autoGenerated.indexOf(path) !== -1) {
					callback(null, "'auto-generate'");
				} else {
					this.__proto__.readFile.apply(this, arguments);
				}
			};
		});
	};
}